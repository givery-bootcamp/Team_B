/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SpacesSpaceIdChannelsChannelIdPageImport } from './routes/spaces/$spaceId/channels/$channelId/page'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const SpacesSpaceIdLazyImport = createFileRoute('/spaces/$spaceId')()
const SpacesSpaceIdChannelsChannelIdLazyImport = createFileRoute(
  '/spaces/$spaceId/channels/$channelId',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SpacesSpaceIdLazyRoute = SpacesSpaceIdLazyImport.update({
  path: '/spaces/$spaceId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/spaces.$spaceId.lazy').then((d) => d.Route),
)

const SpacesSpaceIdChannelsChannelIdLazyRoute =
  SpacesSpaceIdChannelsChannelIdLazyImport.update({
    path: '/spaces/$spaceId/channels/$channelId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/spaces.$spaceId_.channels.$channelId.lazy').then(
      (d) => d.Route,
    ),
  )

const SpacesSpaceIdChannelsChannelIdPageRoute =
  SpacesSpaceIdChannelsChannelIdPageImport.update({
    path: '/channels/$channelId/page',
    getParentRoute: () => SpacesSpaceIdLazyRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/spaces/$spaceId': {
      id: '/spaces/$spaceId'
      path: '/spaces/$spaceId'
      fullPath: '/spaces/$spaceId'
      preLoaderRoute: typeof SpacesSpaceIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/spaces/$spaceId/channels/$channelId': {
      id: '/spaces/$spaceId/channels/$channelId'
      path: '/spaces/$spaceId/channels/$channelId'
      fullPath: '/spaces/$spaceId/channels/$channelId'
      preLoaderRoute: typeof SpacesSpaceIdChannelsChannelIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/spaces/$spaceId/channels/$channelId/page': {
      id: '/spaces/$spaceId/channels/$channelId/page'
      path: '/channels/$channelId/page'
      fullPath: '/spaces/$spaceId/channels/$channelId/page'
      preLoaderRoute: typeof SpacesSpaceIdChannelsChannelIdPageImport
      parentRoute: typeof SpacesSpaceIdLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  SpacesSpaceIdLazyRoute: SpacesSpaceIdLazyRoute.addChildren({
    SpacesSpaceIdChannelsChannelIdPageRoute,
  }),
  SpacesSpaceIdChannelsChannelIdLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/spaces/$spaceId",
        "/spaces/$spaceId/channels/$channelId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/spaces/$spaceId": {
      "filePath": "spaces.$spaceId.lazy.tsx",
      "children": [
        "/spaces/$spaceId/channels/$channelId/page"
      ]
    },
    "/spaces/$spaceId/channels/$channelId": {
      "filePath": "spaces.$spaceId_.channels.$channelId.lazy.tsx"
    },
    "/spaces/$spaceId/channels/$channelId/page": {
      "filePath": "spaces/$spaceId/channels/$channelId/page.tsx",
      "parent": "/spaces/$spaceId"
    }
  }
}
ROUTE_MANIFEST_END */
